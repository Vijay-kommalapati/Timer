{"version":3,"sources":["components/Time.jsx","components/Countcard.jsx","components/s.mp3","components/TimerCountDownPanel.jsx","components/Timer.jsx","components/App.jsx","index.js"],"names":["Time","useState","time","setTime","setInterval","temp","Date","toLocaleTimeString","Countcard","props","value","setValue","rotateHook","setRotateHook","CountDownStarted","Toggle","setPause","okayHappened","setOkay","useEffect","class","status","theta","interval","p","console","log","name","setTimeout","reportChange","clearInterval","val","angle","timer","pr","className","onWheel","evt","ang","send","setpause","i","deltaY","end","func","style","transform","TimeCountDownPanel","button","setButtonValue","useSound","sound","play","stop","hours","minutes","setCountDown","sc","countdown","input","field","display","color","fontSize","backgroundColor","borderRadius","padding","onClick","Timer","hover","sethover","buttonValue","setBtnValue","CountDownOnOff","setOnOff","onMouseOver","onMouseOut","sendFunction","width","justifyContent","marginTop","TimerCountDownPanel","App","TimeClassName","setTimeClassName","classname","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccf88f8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Time() {\r\n    const [time, setTime]= useState(\"\");\r\n    setInterval(()=>{\r\n        var temp = new Date().toLocaleTimeString(\"it-IT\");\r\n        setTime(temp);\r\n    },1000)\r\n    return <h1>{time}</h1>\r\n}\r\n\r\nexport default Time;","\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction Countcard(props) {\r\n    // creating Hooks for value and rotate Hook is for animation.\r\n    const [value, setValue] = useState(0);\r\n    const [rotateHook, setRotateHook] = useState(0);\r\n    const [CountDownStarted,Toggle] = useState(false);\r\n    const [requestPause,setPause]=useState(false);\r\n    const [okayHappened,setOkay]=useState(false);\r\n\r\n\r\n    // every time the add timer button is newly pressed the values reset to zero.\r\n    // note: props.class is coming from TimerCountDownPanel which in turn is coming from Timer.\r\n    useEffect(() => {\r\n        setValue(0)\r\n    }, [props.class]);\r\n\r\n    // for setting timer value...start on wheel event and changes the vlaue (increses or decreses)\r\n    // depending on the wheel up or wheel down \r\n    // while increasing or decresing shows animation also.\r\n    function Wheel(evt) {\r\n        // This happens when the button is showing Start only.\r\n        // if the timer is running the button value would be Pause hence this feature doesn't happen\r\n        if (props.status === \"Start\") {\r\n            var ang;\r\n            // for animation \r\n            function setpause(ang, i) {\r\n                setTimeout(() => {\r\n                    setRotateHook(ang);\r\n                }, i * 100)\r\n            }\r\n            // when wheel down value increses\r\n            if (evt.deltaY >= 0) {\r\n                ang = 0;\r\n                if (value !== props.end) {\r\n                    for (var i = 0; i < 6; i++) {\r\n                        ang = ang - 30;\r\n                        if (ang === -90) {\r\n                            ang = 90;\r\n                            setValue(value + 1);\r\n                        }\r\n                        setpause(ang, i);\r\n                    }\r\n                } else {\r\n                    setValue(0);\r\n\r\n                }\r\n            \r\n            }\r\n            // when wheel up value decreses.\r\n             else {\r\n                ang = 0;\r\n                if (value !== 0) {\r\n                    for (var i = 0; i < 6; i++) {\r\n                        ang = ang + 30;\r\n                        if (ang === 90) {\r\n                            ang = -90;\r\n                            setValue(value - 1);\r\n                        }\r\n                        setpause(ang, i);\r\n                    }\r\n                } else {\r\n                    setValue(props.end);\r\n                }\r\n\r\n            }\r\n            // each time an update occurs the value is being sent to TimerCountDownPanel.\r\n            // value is not udating real time (unsolved problem). Hence Jugad is used as below.\r\n            // this problem has occured because i am using Value which is tricky..\r\n            // solve this in future revisions.\r\n            var send;\r\n            if (evt.deltaY >= 0) {\r\n                if (value !== props.end) {\r\n                    send = value + 1;\r\n                } else {\r\n                    send = 0;\r\n                }\r\n\r\n            }\r\n            if (evt.deltaY <= 0) {\r\n                if (value !== 0) {\r\n                    send = value - 1;\r\n                } else {\r\n                    send = props.end;\r\n                }\r\n\r\n            }\r\n            // send value to TimeCountDownPanel through prop function.\r\n            props.func(send, props.name);\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n   \r\n    useEffect(()=>{\r\n        if(props.status===\"Pause\"){\r\n            var theta =0;\r\n            const interval = setInterval(()=>{\r\n                if (theta === 90) {\r\n                    theta = -90;\r\n                    setValue((p) => {\r\n                        if(p!==0){\r\n                            console.log(props.name,p-1);\r\n                            return p-1;\r\n                        }else{\r\n                            setTimeout(()=>{\r\n                                props.reportChange(\"hours\");\r\n                            },100)\r\n            \r\n                            return 59;   \r\n                        }\r\n                    });   \r\n                }\r\n                theta = theta+18;\r\n                if(theta===0){\r\n                    clearInterval(interval);\r\n                }\r\n                setRotateHook(theta);\r\n\r\n            },100);\r\n           \r\n        }\r\n    },[props.val])\r\n    \r\n\r\n    useEffect(()=>{\r\n        if((props.status===\"Start\"||props.status===\"Okay\")&&CountDownStarted===true&&props.name===\"seconds\"&&(!okayHappened)){\r\n            setPause(true);\r\n        }\r\n        if(props.status===\"Okay\"){\r\n            setOkay(true);\r\n           setValue(()=>{\r\n               return 0;\r\n           })\r\n        }\r\n        if(props.name===\"seconds\"&&props.status===\"Pause\"){\r\n            setOkay(false);\r\n            Toggle(true);\r\n            var angle = 0;\r\n            const timer = setInterval(() => {\r\n                if (angle === 90) {\r\n                    angle = -90;\r\n                    setValue((p) => {\r\n                        if(p!==0){\r\n                            return p-1;\r\n                        }else{\r\n                            props.reportChange(\"minutes\");\r\n                            return 59;\r\n                        }\r\n                    });\r\n                    \r\n                }\r\n                angle = angle + 18;\r\n                setPause((pr)=>{\r\n                    if( pr===true && angle===0){\r\n                        clearInterval(timer);\r\n                        return false;\r\n                    }else{\r\n                        return pr;\r\n                    }\r\n                })\r\n                \r\n                setRotateHook(angle);\r\n            }, 100)\r\n           \r\n        }\r\n    },[props.status]);\r\n    \r\n    \r\n\r\n    return <div className=\"p\">\r\n        <div className=\"c\"\r\n            onWheel={Wheel}\r\n            style={{\r\n                transform: \"rotateX(\" + rotateHook + \"deg)\"\r\n            }}\r\n        >{value}</div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n}\r\nexport default Countcard;","export default __webpack_public_path__ + \"static/media/s.24b60537.mp3\";","import React, { useEffect, useState } from \"react\";\r\nimport Countcard from \"./Countcard.jsx\";\r\nimport useSound from \"use-sound\";\r\nimport sound from \"./s.mp3\";\r\n\r\n\r\n\r\nfunction TimeCountDownPanel(props) {\r\n    const [button, setButtonValue] = useState(\"Start\");\r\n    const [play,{stop}]=useSound(sound);\r\n    useEffect(()=>{\r\n        if(button===\"Okay\"){\r\n            play();\r\n        }if(button==\"Start\"){\r\n            stop();\r\n        }\r\n    },[button])\r\n    \r\n  \r\n    var [[hours, minutes, seconds], setCountDown] = useState([true, true, 0]);\r\n    var [[h, m, s], sc] = useState([0, 0, 0]);\r\n    useEffect(() => {\r\n        setButtonValue(\"Start\");\r\n    }, [props.class])\r\n\r\n    function countdown(input, name) {\r\n        if (name === \"seconds\") {\r\n            sc((p) => {\r\n                return ([p[0], p[1], input])\r\n            })\r\n\r\n        }\r\n        else if (name === \"minutes\") {\r\n            sc((p) => {\r\n                return ([p[0], input, p[2]]);\r\n            })\r\n        }\r\n        else {\r\n            sc((p) => {\r\n                return ([input, p[1], p[2]]);\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function reportChange(field) {\r\n\r\n        if (field === \"minutes\") {\r\n            sc((p) => {\r\n              \r\n                    if (p[1] !== 0) {\r\n                        setCountDown((pr) => {\r\n                            return ([pr[0], !pr[1], pr[2]]);\r\n                        })\r\n                        return ([p[0],p[1] - 1,p[2]]);\r\n                    }\r\n                    else {\r\n                        if(p[0]!==0){\r\n                            setCountDown((pr) => {\r\n                                return ([!pr[0], !pr[1], pr[2]]);\r\n                            })\r\n                            return ([p[0],59,p[2]]);\r\n                        }else{\r\n                            setButtonValue(\"Okay\");\r\n                           \r\n                            return ([p[0],p[1],p[2]]);\r\n                        }\r\n                        \r\n                    }\r\n                \r\n            })\r\n            \r\n        } else {\r\n            sc((p)=>{\r\n                if(p[0]!==0){\r\n                    setCountDown((pr) => {\r\n                        return ([!pr[0], pr[1], pr[2]]);\r\n                    })\r\n                    return ([p[0]-1,p[1],p[0]]);\r\n                }else{\r\n                    return (p);\r\n                }\r\n            })\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    function timerBtnFun() {\r\n        if (button === \"Start\") {\r\n            setButtonValue(\"Pause\");\r\n        } else if(button === \"Okay\") {\r\n            setButtonValue(\"Start\");\r\n        }else{\r\n            setButtonValue(\"Start\");\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return <div className={props.class}>\r\n        \r\n  \r\n        <div style={{ display: \"flex\" }}>\r\n            <Countcard class={props.class} val={hours} status={button} func={countdown} end={23} name=\"hours\" reportChange={reportChange} />\r\n            <Countcard class={props.class} val={minutes} status={button} func={countdown} end={59} name=\"minutes\" reportChange={reportChange} />\r\n            <Countcard class={props.class} val=\"constant\" status={button} func={countdown} end={59} name=\"seconds\" reportChange={reportChange}  />\r\n\r\n\r\n        </div>\r\n        <button\r\n            style={{\r\n                color: \"white\",\r\n                fontSize: \"2vh\",\r\n                backgroundColor: \"black\",\r\n                borderRadius: \"100%\",\r\n                padding: \"10px\"\r\n            }}\r\n\r\n            className=\"AddTimer\"\r\n            onClick={timerBtnFun}   \r\n        >{button}</button>\r\n\r\n    </div>\r\n}\r\n\r\nexport default TimeCountDownPanel;","import React, { useState } from \"react\";\r\nimport TimerCountDownPanel from \"./TimerCountDownPanel.jsx\";\r\n\r\n\r\nfunction Timer(props){\r\n    const [hover,sethover]=useState(\"none\");\r\n    const [buttonValue,setBtnValue]=useState(\"➕\");\r\n    const [CountDownOnOff,setOnOff]=useState(\"displaynone\");\r\n    \r\n\r\n    function hoverFun(){\r\n        if(buttonValue===\"➕\"){\r\n            sethover(\"block\");\r\n        }     \r\n    }\r\n    function hoverOutFun(){\r\n        sethover(\"none\");\r\n    }\r\n    function clickBtn(){\r\n        if(buttonValue===\"➕\"){\r\n            props.sendFunction(\"TimeMinimum\");\r\n            setBtnValue(\"➖\");\r\n            setOnOff(\"countdown\");\r\n        }else{\r\n            props.sendFunction(\"Time\");\r\n            setBtnValue(\"➕\");\r\n            setOnOff(\"displaynone\");\r\n        }\r\n\r\n    }\r\n    return <div className=\"timer\">\r\n        \r\n    \r\n        <button className=\"AddTimer\"><p\r\n        style={\r\n            {color:\"white\",\r\n            fontSize:\"2vh\",\r\n            backgroundColor:\"black\",\r\n            borderRadius: \"100%\",\r\n            padding:\"10px\"\r\n            }\r\n\r\n            } \r\n            onMouseOver={hoverFun}\r\n            onMouseOut={hoverOutFun}\r\n            onClick={clickBtn}\r\n            >{buttonValue}</p> </button>\r\n\r\n            <div style={{width:\"100vw\",display:\"flex\",justifyContent:\"center\",marginTop:\"3vh\"}}><TimerCountDownPanel  class={CountDownOnOff} /></div>\r\n            \r\n            <p style={{display:hover}} className=\"hoverdisplay\">Set Timer</p>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Timer;","import React,{useState} from \"react\";\r\nimport Time from \"./Time\";\r\nimport Timer from \"./Timer\";\r\n\r\nfunction App(){\r\n    const [TimeClassName,setTimeClassName]=useState(\"Time\");\r\n    function TimeSize(classname){\r\n        setTimeClassName(classname);\r\n    }\r\n    return <div className={TimeClassName}>\r\n        <Time />\r\n        <Timer sendFunction={TimeSize}/>\r\n    </div>\r\n}\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport App from \"./components/App\";\n// import Test from \"./components/test\";\n\nReactDom.render(<App />\n    ,document.getElementById(\"root\"));"],"sourceRoot":""}